法一：
void left_move(char arr[], int k)
{
	int len = strlen(arr);

	int j = 0;
	for (j = 0; j < k%len; j++)
	{
		char tmp = arr[0];
		int i = 0;
		for (i = 0; i < len - 1; i++)
		{
			arr[i] = arr[i + 1];
		}
		arr[len - 1] = tmp;
	}
}
/ int main()
{
	//左旋转字符代码
	char arr[20] = "abcdef";
	//bafedc
	//cdefab

	int k = 0;
	scanf("%d", &k);

	left_move(arr, k);
	
	printf("%s\n", arr);
	return 0;
}





法二：（用之前的逆序，先分为两小部分逆序，在让两部分整体逆序）
 void reverse(char* left, char* right)
{
	while (left < right)
	{
		char tmp = *left;
		*left = *right;
		*right = tmp;
		left++;
		right--;
	}
}

void left_move(char arr[], int k)
{
	//abcdef
	int len = strlen(arr);
	k %= len;
	reverse(arr, arr+k-1);
	reverse(arr+k, arr + len-1);
	reverse(arr, arr+len-1);
}

int main()
{
	//左旋转字符代码
	char arr[20] = "abcdef";
	//bafedc
	//cdefab

	int k = 0;
	scanf("%d", &k);

	left_move(arr, k);
	
	printf("%s\n", arr);
	return 0;