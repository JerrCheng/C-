//有一个数字矩阵，矩阵的每行从左到右是递增的，矩阵从上到下是递增的，请编写程序在这样的矩阵中查找某个数字是否存在。
方案一：找每一行最大的比，以及每一列最小的比

void find_k(int arr[3][3], int k, int r, int c)
{
	int x = 0;
	int y = c - 1;
	int flag = 0;
	while (x<r && y>=0)
	{
		if (arr[x][y] < k)
		{
			x++;
		}
		else if (arr[x][y] > k)
		{
			y--;
		}
		else
		{
			printf("找到了，下标是:%d %d\n", x, y);
			return;
		}
	}
	printf("找不到\n");
}
int main()
{
int arr[3][3] = {1,2,3,4,5,6,7,8,9};
int k = 7;
find_k(arr,k,3,3);
return 0;
}


方案二：在一的基础上通过return返回坐标
返回型参数
void find_k(int arr[3][3], int k, int *px, int* py)
{
	int x = 0;
	int y = *px - 1;
	int flag = 0;
	while (x < *py && y >= 0)
	{
		if (arr[x][y] < k)
		{
			x++;
		}
		else if (arr[x][y] > k)
		{
			y--;
		}
		else
		{
			*px = x;
			*py = y;
			return;
		}
	}
	//找不到
	*px = -1;
	*py = -1;
}

//高内聚，低耦合

int main()
{
	int arr[3][3] = { 1,2,3,4,5,6,7,8,9 };
	int k = 12;
	int x = 3;
	int y = 3;

	find_k(arr, k, &x, &y);
	if (x == -1 && y == -1)
	{
		printf("找不到\n");
	}
	else
	{
		printf("找到了，下标是:%d %d\n", x, y);
	}
	return 0;
}

